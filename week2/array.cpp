#include <iostream>
using namespace std;

// 数组
// 放在一块连续的内存空间中
// 数组中每个元素都是相同数据类型

// 数组名(常量)
// 统计整个数组在内存中的长度
// 获取数组在内存中的首地址

// 二维数组

int main()
{
    // 1.数据类型 数组名[数组长度];
    int arr[5];
    arr[0]=10;
    arr[1]=20;
    arr[2]=30;
    arr[3]=40;
    arr[4]=50;

    // 2.数据类型 数组名[数组长度]={值1,值2,...};
    int arr2[5]={1,2,3};  //如果初始化没有全部填写完,用0填补
    for(int i=0;i<5;i++)
    {
        cout<<arr2[i]<<endl;
    }

    // 3.数据类型 数组名[]={值1,值2,...};
    int arr3[]={23,5,3,2,6,234,6,43,3};


    // 数组长度
    cout<<sizeof(arr3)/sizeof(arr3[0])<<endl;
    // 数组首地址
    cout<<"数组首地址为"<<arr3<<endl;  //地址值
    cout<<"数组中第一个元素地址为"<<&arr3[0]<<endl;  //第一个元素地址值重合
    cout<<"数组中第二个元素地址为"<<&arr3[1]<<endl; //差四个字节



    // 1.数组类型 数组名[行数][列数];
    int arr4[2][3];
    arr4[0][0]=1;
    arr4[0][1]=2;
    arr4[0][2]=3;
    arr4[1][0]=4;
    arr4[1][1]=5;
    arr4[1][2]=6;
    for(int i=0;i<2;i++)
    {
        for(int j=0;j<3;j++)
        {
            cout<<arr4[i][j]<<endl;
        }
    }

    // 2.数据类型 数组名[行数][列数]={{数据1,数据2},{数据3,数据4}};
    int arr5[2][3]=
    {
        {1,2,3},
        {4,5,6}
    };

    // 3.数据类型 数组名[行数][列数]={数据1,数据2,数据3,数据4};
    int arr6[2][3]={1,2,3,4,5,6};
    for(int i=0;i<2;i++)
    {
        for(int j=0;j<3;j++)
        {
            cout<<arr6[i][j];
        }
        cout<<endl;
    }

    // 4.数据类型 数组名[][列数]={数据1,数据2,数据3,数据4}
    int arr7[][3]={1,2,3,4,5,6};

}