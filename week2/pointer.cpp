#include <iostream>
using namespace std;

void swap(int *p1, int *p2){
    int temp=*p1;
    *p1=*p2;
    *p2=temp;
}

int main(){
    int a=10;
    // 1.定义指针 数据类型 * 指针变量名;
    int * p;
    // 让指针记录变量a的地址
    p=&a;
    cout<<"a的地址为："<<p<<endl;

    // 2.使用指针 可以通过解引用（指针前加*）的方式来找到指针指向的内存
    *p=1000;
    cout<<"a="<<*p<<endl;

    //指针占的内存空间大小为4个字节（32位系统）/8个字节（64位）
    cout<<"指针的内存空间为："<<sizeof(p)<<endl;


    // 空指针：指针变量指向内存中编号为0的空间，用来初始化指针变量
    int * p1=NULL;
    // 空指针指向的内存是不可以访问的（0-255之间的内存编号是系统占用的，因此不可以访问

    // 野指针：指针变量指向非法的内存空间，在程序中尽量避免


    // 常量指针：const修饰指针
    // 指针的指向可以修改，但是指针指向的值不可以改
    const int * p2= &a;
    int b=20;
    p2=&b; 

    // 指针常量：const修饰常量
    // 指针的指向不可以改，指针指向的值可以改
    int * const p3=&a;
    *p3=50;

    // const既修饰指针，又修饰常量
    // 指针的指向和指针指向的值都不可以改


    // 指针和数组
    int arr[10]={1,2,3,4,5,6,7,8,9,10};
    int *p4=arr;
    cout<<"利用指针访问第一个元素："<<*p4<<endl;
    p4++; //让指针向后偏移4个字节
    cout<<"利用指针访问第二个元素："<<*p4<<endl;
    cout<<p4[1]<<endl;


    // 指针和函数
    // 地址传递（修改实参）
    swap(&a,&b);
    cout<<"a="<<a<<endl;
    cout<<"b="<<b<<endl;

}